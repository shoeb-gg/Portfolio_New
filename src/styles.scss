// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$my-portfolio-primary: mat.define-palette(mat.$indigo-palette);
$my-portfolio-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$my-portfolio-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$my-portfolio-theme: mat.define-light-theme(
    (
        color: (
            primary: $my-portfolio-primary,
            accent: $my-portfolio-accent,
            warn: $my-portfolio-warn,
        ),
    )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($my-portfolio-theme);

/* You can add global styles to this file, and also import other style files */
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
    height: 100%;
    margin: 0;
    font-family: "Chakra Petch", sans-serif;
    @apply bg-container-black;
}

::-webkit-scrollbar {
    width: 0px;
}

.cust-bounce {
    animation: bounce 1s ease infinite;
}

@keyframes bounce {
    0% {
        transform: scale(1, 1) translateY(0);
    }
    10% {
        transform: scale(1.05, 0.95) translateY(0);
    }
    30% {
        transform: scale(0.95, 1.05) translateY(-5px);
    }
    50% {
        transform: scale(1.05, 0.95) translateY(0);
    }
    58% {
        transform: scale(1, 1) translateY(-2px);
    }
    65% {
        transform: scale(1, 1) translateY(0);
    }
    100% {
        transform: scale(1, 1) translateY(0);
    }
}

@property --gradient-angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
}

:root {
    --clr-1: #4ade80;
    --clr-2: #2dd4bf;
    --clr-3: #38bdf8;
    --clr-4: #818cf8;
    --clr-5: #c084fc;
    --clr-6: #f472b6;
    --clr-7: #f87171;
    --clr-8: #f8717100;
    --clr-9: #f8717100;
    --clr-10: #f8717100;
}

.card-sp {
    position: relative;

    &::before,
    &::after {
        content: "";
        position: absolute;
        inset: -1px;
        z-index: -1;
        background: conic-gradient(
            from var(--gradient-angle),
            var(--clr-1),
            var(--clr-2),
            var(--clr-3),
            var(--clr-4),
            var(--clr-5),
            var(--clr-6),
            var(--clr-7),
            var(--clr-8),
            var(--clr-9),
            var(--clr-10),
            var(--clr-9),
            var(--clr-8),
            var(--clr-7),
            var(--clr-6),
            var(--clr-5),
            var(--clr-4),
            var(--clr-3),
            var(--clr-2),
            var(--clr-1)
        );
        border-radius: inherit;
        animation: rotation 8s linear infinite;
    }
}

@keyframes rotation {
    0% {
        --gradient-angle: 0deg;
    }
    100% {
        --gradient-angle: 360deg;
    }
}
